// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// llk_h2_rho
double llk_h2_rho(double rho, double h2_1, double h2_2, double sigma_1, double sigma_2, double n_1, double n_2, double num_SNP, arma::vec z_1, arma::vec z_2, arma::mat R_1, arma::mat R_2);
RcppExport SEXP _Logica_llk_h2_rho(SEXP rhoSEXP, SEXP h2_1SEXP, SEXP h2_2SEXP, SEXP sigma_1SEXP, SEXP sigma_2SEXP, SEXP n_1SEXP, SEXP n_2SEXP, SEXP num_SNPSEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP R_1SEXP, SEXP R_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type h2_1(h2_1SEXP);
    Rcpp::traits::input_parameter< double >::type h2_2(h2_2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_1(sigma_1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< double >::type n_1(n_1SEXP);
    Rcpp::traits::input_parameter< double >::type n_2(n_2SEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_1(R_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_2(R_2SEXP);
    rcpp_result_gen = Rcpp::wrap(llk_h2_rho(rho, h2_1, h2_2, sigma_1, sigma_2, n_1, n_2, num_SNP, z_1, z_2, R_1, R_2));
    return rcpp_result_gen;
END_RCPP
}
// llk_h2_est
double llk_h2_est(double h2, double sigma, arma::vec z, arma::mat R, double n, double num_SNP);
RcppExport SEXP _Logica_llk_h2_est(SEXP h2SEXP, SEXP sigmaSEXP, SEXP zSEXP, SEXP RSEXP, SEXP nSEXP, SEXP num_SNPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    rcpp_result_gen = Rcpp::wrap(llk_h2_est(h2, sigma, z, R, n, num_SNP));
    return rcpp_result_gen;
END_RCPP
}
// llk_sigma_e_est
double llk_sigma_e_est(double sigma, arma::vec z, arma::mat R, double n, double num_SNP);
RcppExport SEXP _Logica_llk_sigma_e_est(SEXP sigmaSEXP, SEXP zSEXP, SEXP RSEXP, SEXP nSEXP, SEXP num_SNPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z(zSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    rcpp_result_gen = Rcpp::wrap(llk_sigma_e_est(sigma, z, R, n, num_SNP));
    return rcpp_result_gen;
END_RCPP
}
// llk_h2_trans_est
double llk_h2_trans_est(double h2, double sigma, arma::vec Utz, arma::vec eig_val, double n, double num_SNP);
RcppExport SEXP _Logica_llk_h2_trans_est(SEXP h2SEXP, SEXP sigmaSEXP, SEXP UtzSEXP, SEXP eig_valSEXP, SEXP nSEXP, SEXP num_SNPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h2(h2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Utz(UtzSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eig_val(eig_valSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    rcpp_result_gen = Rcpp::wrap(llk_h2_trans_est(h2, sigma, Utz, eig_val, n, num_SNP));
    return rcpp_result_gen;
END_RCPP
}
// llk_sigma_e_trans_est
double llk_sigma_e_trans_est(double sigma, arma::vec Utz, arma::vec eig_val);
RcppExport SEXP _Logica_llk_sigma_e_trans_est(SEXP sigmaSEXP, SEXP UtzSEXP, SEXP eig_valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Utz(UtzSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type eig_val(eig_valSEXP);
    rcpp_result_gen = Rcpp::wrap(llk_sigma_e_trans_est(sigma, Utz, eig_val));
    return rcpp_result_gen;
END_RCPP
}
// est_h2_null_score
SEXP est_h2_null_score(double h2_1, double h2_2, double sigma_1, double sigma_2, arma::vec z_1, arma::vec z_2, arma::mat R_1, arma::mat R_2, double n_1, double n_2, double num_SNP, int max_iter, bool fix_intercept);
RcppExport SEXP _Logica_est_h2_null_score(SEXP h2_1SEXP, SEXP h2_2SEXP, SEXP sigma_1SEXP, SEXP sigma_2SEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP R_1SEXP, SEXP R_2SEXP, SEXP n_1SEXP, SEXP n_2SEXP, SEXP num_SNPSEXP, SEXP max_iterSEXP, SEXP fix_interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h2_1(h2_1SEXP);
    Rcpp::traits::input_parameter< double >::type h2_2(h2_2SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_1(sigma_1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_1(R_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_2(R_2SEXP);
    Rcpp::traits::input_parameter< double >::type n_1(n_1SEXP);
    Rcpp::traits::input_parameter< double >::type n_2(n_2SEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_intercept(fix_interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(est_h2_null_score(h2_1, h2_2, sigma_1, sigma_2, z_1, z_2, R_1, R_2, n_1, n_2, num_SNP, max_iter, fix_intercept));
    return rcpp_result_gen;
END_RCPP
}
// PX_EM_alt
SEXP PX_EM_alt(double h2_1, double h2_2, double rho, double sigma_1, double sigma_2, arma::vec z_1, arma::vec z_2, arma::mat R_1, arma::mat R_2, double n_1, double n_2, double num_SNP, int n_iter, bool fix_intercept, bool fix_h2);
RcppExport SEXP _Logica_PX_EM_alt(SEXP h2_1SEXP, SEXP h2_2SEXP, SEXP rhoSEXP, SEXP sigma_1SEXP, SEXP sigma_2SEXP, SEXP z_1SEXP, SEXP z_2SEXP, SEXP R_1SEXP, SEXP R_2SEXP, SEXP n_1SEXP, SEXP n_2SEXP, SEXP num_SNPSEXP, SEXP n_iterSEXP, SEXP fix_interceptSEXP, SEXP fix_h2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type h2_1(h2_1SEXP);
    Rcpp::traits::input_parameter< double >::type h2_2(h2_2SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_1(sigma_1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma_2(sigma_2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_1(z_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type z_2(z_2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_1(R_1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type R_2(R_2SEXP);
    Rcpp::traits::input_parameter< double >::type n_1(n_1SEXP);
    Rcpp::traits::input_parameter< double >::type n_2(n_2SEXP);
    Rcpp::traits::input_parameter< double >::type num_SNP(num_SNPSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_intercept(fix_interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type fix_h2(fix_h2SEXP);
    rcpp_result_gen = Rcpp::wrap(PX_EM_alt(h2_1, h2_2, rho, sigma_1, sigma_2, z_1, z_2, R_1, R_2, n_1, n_2, num_SNP, n_iter, fix_intercept, fix_h2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Logica_llk_h2_rho", (DL_FUNC) &_Logica_llk_h2_rho, 12},
    {"_Logica_llk_h2_est", (DL_FUNC) &_Logica_llk_h2_est, 6},
    {"_Logica_llk_sigma_e_est", (DL_FUNC) &_Logica_llk_sigma_e_est, 5},
    {"_Logica_llk_h2_trans_est", (DL_FUNC) &_Logica_llk_h2_trans_est, 6},
    {"_Logica_llk_sigma_e_trans_est", (DL_FUNC) &_Logica_llk_sigma_e_trans_est, 3},
    {"_Logica_est_h2_null_score", (DL_FUNC) &_Logica_est_h2_null_score, 13},
    {"_Logica_PX_EM_alt", (DL_FUNC) &_Logica_PX_EM_alt, 15},
    {NULL, NULL, 0}
};

RcppExport void R_init_Logica(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
